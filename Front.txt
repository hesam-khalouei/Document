این سند به منظور ارائه بهترین شیوه‌های کدنویسی برای پروژه Monorepo که شامل سه برنامه Client، Admin و Seller و دو ماژول Authentication و Order می‌باشد، تهیه شده است. این پروژه با استفاده از تکنولوژی‌های Next.js 14، GraphQL، NextAuth، ShadcnUI، Tailwind، TypeScript، i18n با next-translator و Docker توسعه یافته است. هدف این سند، نشان دادن این است که تمامی بهترین شیوه‌های کدنویسی در این پروژه رعایت شده و به طور کامل پیاده‌سازی شده‌اند.






1. رعایت یکنواختی کد
ESLint و Prettier به طور کامل برای بررسی و قالب‌بندی کد در تمام بخش‌های پروژه تنظیم و استفاده شده است. همچنین، تایپ‌های TypeScript با دقت برای جلوگیری از خطاهای زمان اجرا پیاده‌سازی شده‌اند.
2. Code Modularization
کد پروژه به صورت ماژولار و با استفاده از TypeScript برای تعریف اینترفیس‌ها و تایپ‌ها، به گونه‌ای سازماندهی شده است که منطق مشترک به درستی در ماژول‌های Authentication و Order قرار گرفته است.
3. File Structure
ساختار فایل‌ها به صورت تمیز و سازمان‌یافته و بر اساس یک ساختار مبتنی بر ویژگی یا دامنه تنظیم شده است. این ساختار اجازه می‌دهد تا هر بخش از پروژه به راحتی قابل دسترسی و توسعه باشد.
4. Version Control
Git flow یا یک استراتژی مشابه برای مدیریت شاخه‌ها و توسعه پروژه به کار گرفته شده است. تمامی ویژگی‌ها و رفع اشکالات در شاخه‌های جداگانه پیاده‌سازی شده و به شاخه اصلی ادغام شده‌اند.
5. پیاده‌سازی بهترین شیوه‌ها در برنامه  Client - Seller - Admin
استراتژی رندرینگ: رندرینگ سمت سرور (SSR) برای بهبود SEO و سرعت بارگذاری صفحات استفاده شده و برای صفحاتی که نیاز به تعاملات بیشتر دارند از CSR بهره گرفته شده است.
مدیریت وضعیت: React Query برای مدیریت وضعیت سمت سرور و Zustand و Context API برای مدیریت وضعیت محلی به کار گرفته شده‌اند.
UI/UX: طراحی رابط کاربری با استفاده از ShadcnUI و سفارشی‌سازی با Tailwind CSS انجام شده و اطمینان حاصل شده که UI به طور کامل واکنش‌گرا و دسترس‌پذیر است.
احراز هویت و مجوزها: کنترل دسترسی مبتنی بر نقش به کمک NextAuth پیاده‌سازی شده و تمام اقدامات حساس با بررسی‌های سمت سرور محافظت شده‌اند.
مدیریت داده‌ها: GraphQL برای واکشی و دستکاری داده‌ها استفاده شده و مکانیسم‌های کش کردن Apollo Client برای بهینه‌سازی عملکرد به کار گرفته شده است.
پشتیبانی از چند زبان: تمامی محتوای استاتیک و پویا با استفاده از next-translator ترجمه و محلی‌سازی شده است. تجربه کاربری برای تغییر زبان در برنامه به صورت یکپارچه پیاده‌سازی شده است.
سفارشی‌سازی رابط کاربری: قابلیت سفارشی‌سازی برای فروشندگان فراهم شده و تنظیمات مربوطه در یک ماژول مرکزی مدیریت می‌شود.
ویژگی‌های بلادرنگ: WebSocket‌ها برای به‌روزرسانی داده‌ها به صورت بلادرنگ پیاده‌سازی شده‌اند.
6. پیاده‌سازی بهترین شیوه‌ها در ماژول Authentication
امنیت: تمامی توکن‌ ها و داده‌های session به صورت امن ذخیره شده و از HTTPS و محافظت CSRF استفاده شده است.
مقیاس‌پذیری: جریان احراز هویت برای پشتیبانی از انواع مختلف احراز هویت بهینه‌سازی شده است.
تجربه کاربری: بازخوردهای کاربر در تمام مراحل احراز هویت به صورت شفاف و دقیق ارائه شده است.
یکپارچگی داده‌ها: اطمینان حاصل شده که داده‌های سفارش در تمام بخش‌های پروژه یکپارچه و معتبر هستند.
مدیریت همزمانی: مکانیزم‌های مدیریت همزمانی برای جلوگیری از مشکلات مرتبط با تغییرات همزمان سفارش‌ها پیاده‌سازی شده است.
طراحی API: ساختار پرس‌وجوها با GraphQL به گونه‌ای طراحی شده که از واکشی بیش از حد داده‌ها جلوگیری شود.
7. بین‌المللی‌سازی (i18n)
ترجمه و محلی‌سازی: تمام متون و عناصر UI با استفاده از next-translator محلی‌سازی شده و تجربه کاربری تغییر زبان به صورت بدون درز و روان پیاده‌سازی شده است.
آزمایش و بررسی: برنامه‌ها به طور منظم در تمامی زبان‌های پشتیبانی شده تست شده‌اند تا از صحت ترجمه‌ها و درستی نمایش UI اطمینان حاصل شود.
8. کانتینر‌سازی با Docker
کانتینر‌سازی محیط‌ها: تمامی برنامه‌ها و ماژول‌ها در محیط‌های یکسان با استفاده از Docker اجرا شده‌اند تا از یکپارچگی محیط‌ها اطمینان حاصل شود.
بیلد چند مرحله‌ای: از بیلد چند مرحله‌ای Docker برای بهینه‌سازی اندازه تصاویر و بهبود زمان‌های بیلد استفاده شده است.
شبکه‌بندی: شبکه‌های Docker برای ایجاد ارتباط بی‌درنگ بین سرویس‌های موجود در monorepo تنظیم شده‌اند.
9. Test و یکپارچه‌سازی مداوم
Test واحدهای تست با Jest و تست‌های انتها به انتها با Cypress پیاده‌سازی شده‌اند و پوشش بالایی در تمامی اجزای حیاتی پروژه حاصل شده است.
پایپ‌لاین‌های CI/CD: پایپ‌لاین‌های CI/CD با استفاده از GitHub Actions تنظیم شده‌اند تا فرآیندهای تست، لاینت و انتشار به صورت خودکار انجام شوند.
نظارت بر عملکرد: ابزارهای نظارت بر عملکرد برای شناسایی و برطرف کردن گلوگاه‌های موجود در برنامه‌ها ادغام شده‌اند.
نتیجه‌گیری
تمامی بهترین شیوه‌های کدنویسی که در این سند شرح داده شده‌اند، به طور کامل در پروژه Monorepo پیاده‌سازی و رعایت شده‌اند. این امر به حفظ پایداری، مقیاس‌پذیری و کارایی پروژه کمک شایانی کرده و این پروژه آماده ارائه و استفاده در محیط تولید و همچنین افزودن پروژه های مشابه با ساختار تعریف شده یکسان بدون هیچ گونه محدودیتی می‌باشد.